6c6
< #define MAX 1000000
---
> #define MAX 10000
8a9
> #define THREAD_MAX 4
72a74,93
>  
> // thread function for multi-threading
> void* merge_sort(void* arg)
> {
>     // which part out of 4 parts
>     int thread_part = part++;
>  
>     // calculating low and high
>     int low = thread_part * (MAX / 4);
>     int high = (thread_part + 1) * (MAX / 4) - 1;
>  
>     // evaluating mid point
>     int mid = low + (high - low) / 2;
>     if (low < high) {
>         merge_sort(low, mid);
>         merge_sort(mid + 1, high);
>         merge(low, mid, high);
>     }
> }
>  
85c106,117
< 
---
>     pthread_t threads[THREAD_MAX];
>  
>     // creating 4 threads
>     for (int i = 0; i < THREAD_MAX; i++)
>         pthread_create(&threads[i], NULL, merge_sort,
>                                         (void*)NULL);
>  
>     // joining all 4 threads
>     for (int i = 0; i < 4; i++)
>         pthread_join(threads[i], NULL);
>  
>     // merging the final 4 parts
96c128
<         cout<<"\n";
---
>     //     cout<<"\n";
99c131
<     cout << "Time taken: Serial :" << (t2 - t1) /
---
>     cout << "Time taken: Parallel : " << (t2 - t1) /
